service: ecommerce-backend

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  memorySize: 1024
  timeout: 15
  environment:
    MONGO_URI: ${env:MONGO_URI}
    JWT_SECRET: ${env:JWT_SECRET}
    REDIS_HOST: ${env:REDIS_HOST}
    REDIS_PORT: ${env:REDIS_PORT}
    REDIS_PASSWORD: ${env:REDIS_PASSWORD}
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    ORDER_QUEUE_URL:
      Ref: OrderQueue
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        - Fn::GetAtt: [OrderQueue, Arn]
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - arn:aws:sns:${self:provider.region}:*:ecommerce-topic

functions:
  graphql:
    handler: src/handler.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true

  orderWorker:
    handler: src/workers/orderHandler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - OrderQueue
              - Arn
          batchSize: 5

resources:
  Resources:
    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ecommerce-order-queue

plugins:
  - serverless-plugin-typescript
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 4000
